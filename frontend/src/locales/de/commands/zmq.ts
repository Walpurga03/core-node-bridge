export const zmqCommands = {
     "getzmqnotifications": {
      "meta": {
        "category": "zmq",
        "params": [],
        "rpcVersion": "0.15.0",
        "complexity": "low"
      },
      "title": "getzmqnotifications",
      "short": "Gibt Informationen zu den aktiven ZeroMQ-Benachrichtigungen zurück.",
      "examples": [
        "getzmqnotifications"
      ],
      "details": "### Was ist `getzmqnotifications`?\n\nDer Befehl `getzmqnotifications` (verfügbar seit Bitcoin Core 0.15.0) zeigt dir, welche ZeroMQ (ZMQ) Benachrichtigungen dein Bitcoin Core Node gerade aktiv anbietet. ZMQ ist ein System, das es deinem Node erlaubt, andere Programme oder Skripte in Echtzeit über bestimmte Ereignisse zu informieren – zum Beispiel, wenn ein neuer Block gefunden oder eine neue Transaktion empfangen wurde. Stell dir vor, dein Node hat einen Nachrichtendienst abonniert, und `getzmqnotifications` zeigt dir, welche Nachrichtenkanäle dieses Dienstes gerade aktiv sind.\n\n**Wofür wird es verwendet? (Was kann ich damit herausfinden?):**\n\n*   **Konfiguration überprüfen:** Sind die ZMQ-Benachrichtigungen, die ich in meiner `bitcoin.conf` (Konfigurationsdatei) oder beim Start des Nodes eingerichtet habe, auch wirklich aktiv und korrekt konfiguriert?\n*   **Aktive Dienste überwachen:** Welche Arten von Benachrichtigungen (z.B. über neue Block-Hashes, komplette Blöcke, neue Transaktions-Hashes etc.) werden an welche Netzwerkadressen gesendet?\n*   **Fehlersuche (Debugging):** Wenn eine Anwendung, die ZMQ-Nachrichten von deinem Node erwartet, nicht richtig funktioniert, kannst du hiermit überprüfen, ob der Node überhaupt die erwarteten Datenströme sendet.\n\n**Was ist das Ergebnis?**\n\nDu erhältst ein JSON-Array. Jedes Objekt in diesem Array repräsentiert eine aktive ZMQ-Benachrichtigung und enthält typischerweise:\n\n```json\n[\n  {\n    \"type\": \"pubhashblock\",               // (String) Art der Benachrichtigung (z.B. pubhashblock, pubhashtx, pubrawblock, pubrawtx, pubsequence)\n    \"address\": \"tcp://127.0.0.1:28332\",   // (String) Die Netzwerkadresse (Protokoll, IP, Port), an der dieser ZMQ-Dienst lauscht.\n    \"hwm\": 1000                           // (Zahl) \"High Water Mark\": Maximale Anzahl Nachrichten in der Warteschlange, bevor ältere ggf. verworfen werden.\n  },\n  {\n    \"type\": \"pubhashtx\",\n    \"address\": \"tcp://127.0.0.1:28333\",\n    \"hwm\": 1000\n  }\n  // ... möglicherweise weitere aktive Benachrichtigungen ...\n]\n```\n\n**Mögliche `type`-Werte (Arten von Benachrichtigungen) sind z.B.:**\n*   `pubhashblock`: Sendet den Hash (die Kennung) neuer Blöcke.\n*   `pubhashtx`: Sendet den Hash neuer Transaktionen, die in den Mempool (Wartebereich für unbestätigte Transaktionen) aufgenommen wurden.\n*   `pubrawblock`: Sendet den vollständigen Inhalt neuer Blöcke (in hexadezimal kodierter Form).\n*   `pubrawtx`: Sendet den vollständigen Inhalt neuer Transaktionen (hexadezimal kodiert).\n*   `pubsequence`: Sendet detailliertere Informationen über Änderungen in der Kette, nützlich um z.B. Reorganisationen (wenn sich die Reihenfolge der letzten Blöcke ändert) zu erkennen.\n\n**Wichtige Hinweise:**\n*   **ZMQ muss aktiviert sein:** Damit dieser Befehl Ergebnisse liefert (außer einem leeren Array `[]`), musst du ZMQ-Benachrichtigungen in deiner Bitcoin Core Konfiguration (`bitcoin.conf` oder als Startparameter) aktiviert haben. Beispiel für `bitcoin.conf`:\n    ```ini\n    zmqpubhashblock=tcp://127.0.0.1:28332\n    zmqpubhashtx=tcp://127.0.0.1:28333\n    ```\n*   **Adresse verstehen:** Die `address` zeigt dir, wo und wie der ZMQ-Dienst erreichbar ist.\n*   **High Water Mark (`hwm`):** Gibt an, wie viele Nachrichten der Dienst zwischenspeichern kann, falls das empfangende Programm nicht schnell genug ist.\n\n**Beispiele für die Kommandozeile:**\n```bash\nbitcoin-cli getzmqnotifications\n```\n```bash\ncurl --user deinBenutzer --data-binary '{\"jsonrpc\": \"2.0\", \"id\": \"curltest\", \"method\": \"getzmqnotifications\", \"params\": []}' -H 'content-type: application/json' http://127.0.0.1:8332/\n```"
    }
}